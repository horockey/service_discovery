// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package model

import (
	"errors"
	"fmt"
)

const (
	// StateDown is a State of type Down.
	StateDown State = iota
	// StateUp is a State of type Up.
	StateUp
)

var ErrInvalidState = errors.New("not a valid State")

const _StateName = "downup"

// StateValues returns a list of the values for State
func StateValues() []State {
	return []State{
		StateDown,
		StateUp,
	}
}

var _StateMap = map[State]string{
	StateDown: _StateName[0:4],
	StateUp:   _StateName[4:6],
}

// String implements the Stringer interface.
func (x State) String() string {
	if str, ok := _StateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("State(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x State) IsValid() bool {
	_, ok := _StateMap[x]
	return ok
}

var _StateValue = map[string]State{
	_StateName[0:4]: StateDown,
	_StateName[4:6]: StateUp,
}

// ParseState attempts to convert a string to a State.
func ParseState(name string) (State, error) {
	if x, ok := _StateValue[name]; ok {
		return x, nil
	}
	return State(0), fmt.Errorf("%s is %w", name, ErrInvalidState)
}
