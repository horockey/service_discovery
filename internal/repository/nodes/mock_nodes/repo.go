// Code generated by mockery v2.53.2. DO NOT EDIT.

package mock_nodes

import (
	context "context"

	model "github.com/horockey/service_discovery/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AddOrUpdate provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) AddOrUpdate(_a0 context.Context, _a1 model.Node) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddOrUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Node) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_AddOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrUpdate'
type MockRepository_AddOrUpdate_Call struct {
	*mock.Call
}

// AddOrUpdate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Node
func (_e *MockRepository_Expecter) AddOrUpdate(_a0 interface{}, _a1 interface{}) *MockRepository_AddOrUpdate_Call {
	return &MockRepository_AddOrUpdate_Call{Call: _e.mock.On("AddOrUpdate", _a0, _a1)}
}

func (_c *MockRepository_AddOrUpdate_Call) Run(run func(_a0 context.Context, _a1 model.Node)) *MockRepository_AddOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Node))
	})
	return _c
}

func (_c *MockRepository_AddOrUpdate_Call) Return(_a0 error) *MockRepository_AddOrUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_AddOrUpdate_Call) RunAndReturn(run func(context.Context, model.Node) error) *MockRepository_AddOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockRepository) Get(ctx context.Context, id string) (model.Node, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Node, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Node); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Node)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRepository_Expecter) Get(ctx interface{}, id interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(_a0 model.Node, _a1 error) *MockRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func(context.Context, string) (model.Node, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: _a0
func (_m *MockRepository) GetAll(_a0 context.Context) ([]model.Node, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Node, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockRepository_Expecter) GetAll(_a0 interface{}) *MockRepository_GetAll_Call {
	return &MockRepository_GetAll_Call{Call: _e.mock.On("GetAll", _a0)}
}

func (_c *MockRepository_GetAll_Call) Run(run func(_a0 context.Context)) *MockRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_GetAll_Call) Return(_a0 []model.Node, _a1 error) *MockRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]model.Node, error)) *MockRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, id
func (_m *MockRepository) Remove(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockRepository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRepository_Expecter) Remove(ctx interface{}, id interface{}) *MockRepository_Remove_Call {
	return &MockRepository_Remove_Call{Call: _e.mock.On("Remove", ctx, id)}
}

func (_c *MockRepository_Remove_Call) Run(run func(ctx context.Context, id string)) *MockRepository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_Remove_Call) Return(_a0 error) *MockRepository_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Remove_Call) RunAndReturn(run func(context.Context, string) error) *MockRepository_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
